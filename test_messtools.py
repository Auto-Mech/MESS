"""This module contains tests for messtools python bindings
"""
import numpy
import messtools
from functools import partial

KELVIN = 3.166829e-6
ANGSTROM = 1.88971616463
WAVENUM = 4.55633e-6

Q = [60.1983, 62.3581, 63.7557, 64.9053, 65.9811, 67.0664, 68.2106, 69.4485,
     70.8085, 72.3157, 73.9938, 75.8652, 77.9519, 80.2754, 82.8571, 85.7181,
     88.8794, 92.3621, 96.1869, 100.375, 104.946, 109.922, 115.324, 121.171,
     127.485, 134.285, 141.594, 149.431, 157.817, 166.772]
QDT = [0.0302761, 0.0163207, 0.0123154, 0.0109421, 0.010705, 0.0110813,
       0.011859, 0.0129453, 0.014296, 0.0158886, 0.0177105, 0.0197543,
       0.0220153, 0.0244906, 0.0271782, 0.0300767, 0.033185, 0.0365025,
       0.0400285, 0.0437624, 0.0477039, 0.0518526, 0.0562081, 0.0607702,
       0.0655386, 0.0705131, 0.0756933, 0.0810792, 0.0866705, 0.0924669]
QDT2 = [-0.000290427, -6.51731e-05, -2.28447e-05, -6.74453e-06, 1.21039e-06,
        5.9895e-06, 9.42064e-06, 1.22352e-05, 1.47438e-05, 1.70879e-05,
        1.93376e-05, 2.15298e-05, 2.36856e-05, 2.58173e-05, 2.79324e-05,
        3.00358e-05, 3.21303e-05, 3.4218e-05, 3.63002e-05, 3.83778e-05,
        4.04514e-05, 4.25216e-05, 4.45887e-05, 4.6653e-05, 4.87146e-05,
        5.07739e-05, 5.2831e-05, 5.4886e-05, 5.6939e-05, 5.89903e-05]


def test__mass():
    """test messtools.mass
    """
    assert numpy.allclose(messtools.mass('C'), 21874.661832)


def test__partition_function():
    """test messtools.partition_function
    """
    labels = ('C', 'O', 'H', 'H', 'H', 'H')
    coords = ANGSTROM * numpy.array([(+0.680654, -0.015532, -0.000006),
                                     (-0.779898,  0.129141, -0.000007),
                                     (+1.066251, -0.547297, -0.898510),
                                     (+1.066279, -0.545186,  0.899732),
                                     (+1.103107,  1.007039, -0.001174),
                                     (-1.080377, -0.854488,  0.000049)])
    freqs = WAVENUM * numpy.array(
            [368.458, 1071.677, 1138.081, 1159.871, 1564.667, 1579.596,
             1633.319, 1649.154, 3058.804, 3226.604, 3316.208, 3558.849])
    anharm_consts = WAVENUM * numpy.array(
        [[-62.9072, -2.03734, 1.39902, 0.7718, -0.748583, -0.952425, -3.04066,
            -9.85978, -1.1995, -3.05404, -2.17322, 9.37671],
         [-2.03734, -34.4675, -17.6249, -33.8369, -2.57928, -7.11594, -4.87287,
             -0.695195, -1.93899, 1.43407, -4.83019, -7.82372],
         [1.39902, -17.6249, -28.3256, -79.702, -21.1792, -10.0388, -1.78482,
             0.895715, -1.08244, -1.44337, 0.412927, 8.11609],
         [0.7718, -33.8369, -79.702, -17.313, -35.1691, -24.2465, -16.8001,
             -1.95792, -3.75987, -0.863932, 0.756437, 3.77747],
         [-0.748583, -2.57928, -21.1792, -35.1691, 0.702364, 2.67627,
             -0.411539, 0.824343, -7.2382, -1.31568, -3.67961, -3.72385],
         [-0.952425, -7.11594, -10.0388, -24.2465, 2.67627, -1.89487, -3.10302,
             -2.95849, -3.31267, -1.48077, -2.38344, 2.93255],
         [-3.04066, -4.87287, -1.78482, -16.8001, -0.411539, -3.10302,
             0.101206, -6.90436, -5.00245, -4.71446, -4.51105, 0.883791],
         [-9.85978, -0.695195, 0.895715, -1.95792, 0.824343, -2.95849,
             -6.90436, -7.40107, -1.97274, -4.53174, -8.54266, -2.91287],
         [-1.1995, -1.93899, -1.08244, -3.75987, -7.2382, -3.31267, -5.00245,
             -1.97274, -1.5162, -2.94028, -1.8887, -0.608924],
         [-3.05404, 1.43407, -1.44337, -0.863932, -1.31568, -1.48077, -4.71446,
             -4.53174, -2.94028, -2.81027, -2.90602, 4.57943],
         [-2.17322, -4.83019, 0.412927, 0.756437, -3.67961, -2.38344, -4.51105,
             -8.54266, -1.8887, -2.90602, -0.395046, 11.8615],
         [9.37671, -7.82372, 8.11609, 3.77747, -3.72385, 2.93255, 0.883791,
             -2.91287, -0.608924, 4.57943, 11.8615, -21.7253]])
    rot_consts = WAVENUM * numpy.array([120.49022, 23.49850, 22.51910])
    rovib_coups = WAVENUM * numpy.array(
        [[-0.02405, -0.00009, -0.00115],
         [-0.03742, -0.00031, -0.00120],
         [-0.03219, -0.00120, -0.00039],
         [-0.02666, -0.00088, -0.00055],
         [-0.23079, -0.00113, -0.01101],
         [0.27936, -0.01627, -0.00105],
         [-0.00371,  0.01300,  0.00895],
         [-0.01164,  0.00166,  0.00270],
         [-0.07826, -0.00337,  0.00022],
         [0.07359,  0.00225, -0.00166],
         [0.02197, -0.00041,  0.00168],
         [0.08700,  0.00377,  0.00034]])
    rdist_labels = ('aaaa', 'bbaa', 'bbbb', 'ccaa', 'ccbb', 'cccc')
    rdist_vals = WAVENUM * numpy.array(
            [-0.1398913120e-03, -0.1977890701e-04, -0.5481665981e-05,
             -0.1914054656e-04, -0.5820757684e-05, -0.4733665640e-05])
    rot_distorts = dict(zip(rdist_labels, rdist_vals))

    q_ = partial(
            messtools.partition_function,
            labels=labels,
            coords=coords,
            freqs=freqs,
            anharm_consts=anharm_consts,
            rot_consts=rot_consts,
            rovib_coups=rovib_coups,
            rot_distorts=rot_distorts)

    t = KELVIN * numpy.arange(100, 3100, 100)
    dt = 0.001 * t
    q = q_(t)
    qdt = (q_(t + dt) - q_(t - dt)) / 2. / dt * KELVIN
    qdt2 = (q_(t + dt) + q_(t - dt) - 2. * q_(t)) / dt / dt * KELVIN * KELVIN

    print(q)
    print(qdt)
    print(qdt2)

    assert numpy.allclose(q, Q)
    assert numpy.allclose(qdt, QDT)
    assert numpy.allclose(qdt2, QDT2)


if __name__ == '__main__':
    test__partition_function()
