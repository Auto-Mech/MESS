#ifndef MODEL_HH
#define MODEL_HH

#include<vector>
#include<set>

#include "slatec.hh"
#include "shared.hh"
#include "lapack.hh"
#include "multindex.hh"
#include "atom.hh"

namespace Model {

  enum {DENSITY, NUMBER, NONE};// calculated properties

  // maximum energy to be used
  double  energy_limit () ;
  void set_energy_limit (double);

  /********************************************************************************************
   ******************************************** READERS ***************************************
   ********************************************************************************************/
  class Collision;
  class Kernel;
  class Well;
  class Barrier;
  class Bimolecular;
  class RotorBase;
  class Core;
  class Tunnel;
  class Fragment;

  SharedPointer<Collision>   new_collision      (std::istream&) ;
  SharedPointer<Kernel>      new_kernel         (std::istream&) ;
  SharedPointer<Well>        new_well           (std::istream&) ;
  SharedPointer<Barrier>     new_barrier        (std::istream&) ;
  SharedPointer<Bimolecular> new_bimolecular    (std::istream&) ;
  SharedPointer<RotorBase>   new_rotor          (std::istream&, const std::vector<Atom>& = std::vector<Atom>())
    ;
  SharedPointer<Core>        new_core           (std::istream&, int) ;
  SharedPointer<Tunnel>      new_tunnel         (std::istream&) ;
  SharedPointer<Fragment>    new_fragment       (std::istream&) ;


  /********************************************************************************************
   ************************************* COLLISION MODEL **************************************
   ********************************************************************************************/

  class Collision {
  public:
    virtual ~Collision ();

    virtual double operator () (double temperature) const = 0;
  };

  class LennardJonesCollision : public Collision {
    double _frequency_factor;
    double _epsilon;

    double _omega_22_star (double) const;
  public:
    LennardJonesCollision (std::istream&) ;
    ~LennardJonesCollision ();

    double operator () (double) const;
  };

  /********************************************************************************************
   ************************************ KERNEL CLASS FAMILY ***********************************
   ********************************************************************************************/

  // collisional energy transfer kernel
  class Kernel { 
  public:
    virtual ~Kernel ();

    enum {UP = 1,      // transition up probability form predefined
	  DENSITY = 2, // transition probability is proportional to the final density of states
	  NOTRUN  = 4  // no truncation even so the transition probability is negative
    };

    virtual double operator () (double ener, double temperature) const =0;
    virtual double cutoff_energy (double temperature) const =0;
    virtual int type () const =0;
  };

  /********************************* EXPONENTIAL KERNEL MODEL **********************************/

  class ExponentialKernel : public Kernel {
    double _factor;
    double _power;
    double _cutoff;
    int    _type;
    double _energy_down (double temperature) const;
  public:

    ExponentialKernel (std::istream&) ;
    ~ExponentialKernel ();

    double operator () (double, double) const;
    double cutoff_energy (double) const;
    int type () const;

  };

  /********************************************************************************************
   ********************************* HINDERED ROTOR CLASS FAMILY ******************************
   ********************************************************************************************/
  class RotorBase {
    int     _symmetry;
    double  _rotational_constant;
    
  protected:
    std::string last_key;

    RotorBase (std::istream&, std::vector<Atom>) ;

  public:
    virtual ~RotorBase ();

    double rotational_constant () const { return _rotational_constant; }
    int    symmetry            () const { return _symmetry; }


    virtual double ground        ()                   const =0;// ground energy
    virtual double energy_level  (int level_index)    const =0;// excited states relative to the ground
    virtual double weight        (double temperature) const =0;// stat weight relative to the ground
    virtual int    level_size    ()                   const =0;
    virtual int    states_number (double energy)      const =0;// energy relative to the ground

    virtual void   set_energy_levels (double maximum_energy)=0;// energy relative to ground   
  };

  // Potential Fourier Expansion
  class HinderedRotorBase : public RotorBase {
    Lapack::Vector _fourier_expansion;
    double         _htol;   // Harmonics-on-the-grid matrix degeneracy tollerance
    bool           _iszero; // Energy zero at global potential minimum

  protected:
    HinderedRotorBase (std::istream&, const std::vector<Atom>&) ;

    bool   iszero            ()       const { return _iszero; }
    double fourier_expansion (int i)  const { return _fourier_expansion[i]; }
    int    expansion_size    ()       const { return _fourier_expansion.size(); }
    double potential         (double, int =0) const;
     
  public:
    virtual ~HinderedRotorBase ();
  };

  /**************************************** FREE ROTOR **********************************************/

  class FreeRotor : public RotorBase {
    double _ground;
    int _level_size;

  public:
    FreeRotor (std::istream&, const std::vector<Atom>&) ;
    ~FreeRotor ();

    double ground        ()       const;
    double energy_level  (int)    const;
    double weight        (double) const;
    int    level_size    ()       const;
    int    states_number (double) const;

    void set_energy_levels (double maximum_energy);
  };

  /*************************************** QUANTUM ROTOR *******************************************/

  class HinderedRotor : public HinderedRotorBase {

    std::vector<double> _energy_level;   // energy levels
    double              _absolute_ground;// absolute lowest level energy
    double              _absolute_top;   // absolute highest level energy
    int                 _top_ssn;        // semiclassical number of states at the highest energy level
    double              _spacing;        // average distance between energy levels (estimate)

    int            _semiclassical_states_number  (double energy) const;// absolute energy
    Lapack::Vector _momentum_space_energy_levels (int ham_size)  const;
    Lapack::Vector _real_space_energy_levels     ()              const;
    void           _set_quantum_levels           (Lapack::Vector) ;
    void           _add_semiclassical_level      ();

    std::vector<double> _pot;       // potential-on-the-grid
    std::vector<double> _freq;      // frequency-on-the-grid
    double              _astep;     // angular discretization step
    double              _pot_max;   // global potential energy maximum
    double              _pot_min;   // global potential energy minimum
    double              _freq_max;  // maximum frequency
    double              _freq_min;  // minimum frequency
    
    // controls
    int    _level_size_min;// minimum number of energy levels
    int    _ham_size_max;  // maximum dimension of the Hamiltonian
    int    _ham_size_min;  // minimal dimension of the Hamiltonian
    int    _grid_size;     // highest harmonics discretization size
    double _wtol;          // statistical weight calculation tollerance
    double _etol;          // energy level tollerance (for semiclassical energy levels)
    int    _spac_aver_size;// spacing averaging size

  public: 
    HinderedRotor (std::istream&, const std::vector<Atom>&) ;
    ~HinderedRotor ();

    double ground        ()       const;
    double energy_level  (int)    const;
    int    level_size    ()       const;
    int    states_number (double) const;

    void set_energy_levels (double maximum_energy);

    double weight (double) const;
    double quantum_weight (double) const;
    int get_semiclassical_weight (double, double& cw, double& sw) const;
  };

  /**************************************************************************************
   ************************************* TUNNELING **************************************
   **************************************************************************************/

  class Tunnel {
    double  _cutoff;            // cutoff energy
    static double _max_exp_pow; // maximum exponent power

  public:
    Tunnel(std::istream&) ;
    virtual ~Tunnel ();

    double  cutoff_energy () const { return      _cutoff; }

    static double  max_exp_pow           () { return _max_exp_pow; }
    static void    set_max_exp (double val) { _max_exp_pow = val; }

    virtual double factor (double) const =0;
    virtual double weight (double) const =0; // statistical weight relative to minimal energy
  };

  /**************************************************************************************
   ************************** PARABOLIC BARRIER TUNNELING *******************************
   **************************************************************************************/

  class HarmonicTunnel: public Tunnel {
    double _freq;

    static void _integrant (const double&, const double*, double*, void*, void*); 

  public:
    HarmonicTunnel(std::istream&) ;
    ~HarmonicTunnel ();

    double factor (double) const;
    double weight (double) const;
  };

  /**************************************************************************************
   ************************** ECKART BARRIER TUNNELING ********************************
   **************************************************************************************/

  class EckartTunnel: public Tunnel {
    mutable double _rpar[6];

    static double _factor (double, const double*) ;
    static void _integrant (const double&, const double*, double*, void*, void*); 

  public:
    EckartTunnel(std::istream&) ;
    ~EckartTunnel ();

    double factor (double) const;
    double weight (double) const;
  };

  /**************************************************************************************
   ************************************* RRHO CORE **************************************
   **************************************************************************************/

  class Core {
  public:
    virtual ~Core ();

    virtual double ground       () const =0;
    virtual double weight (double) const =0;
    virtual double states (double) const =0;
    virtual double mass         () const =0;
    virtual const std::vector<Atom>& geometry () const =0;
  };

  /**************************************************************************************
   ************************************* RIGID ROTOR ************************************
   **************************************************************************************/

  class RigidRotor : public Core {
    double            _factor;
    std::vector<Atom> _atom;
    int               _mode;
    int               _rdim;
    double            _mass;

  public:
    RigidRotor (std::istream&, int) ;
    ~RigidRotor ();

    double ground       () const;
    double weight (double) const;
    double states (double) const;
    double   mass       () const;
    const std::vector<Atom>& geometry () const;
  };

  /*****************************************************************************************
   *************************** ROTATIONAL NUMBER OF STATES FROM ROTD ***********************
   *****************************************************************************************/
  
  class Rotd : public Core {
    
    Array<double>       _rotd_ener; // relative energy on the grid
    Array<double>       _rotd_nos; // density of states of the transitional modes on the grid

    double              _mass;
    double              _ground;
    Slatec::Spline      _rotd_spline;
    double              _rotd_emin, _rotd_emax;
    double              _rotd_nmin, _rotd_amin;
    double              _rotd_nmax, _rotd_amax;

  public:
    Rotd (std::istream&, int) ;
    ~Rotd ();

    double ground       () const;
    double states (double) const;
    double weight (double) const;
    double   mass       () const;
    const std::vector<Atom>& geometry () const;
  };

  /********************************************************************************************
   ************************* INTERNAL ROTATION / UMBRELLA MODE DESCRIPTION ********************
   ********************************************************************************************/
  void shift_cm_to_zero(std::vector<Atom>& atom);
  Lapack::SymmetricMatrix inertia_moment_matrix(const std::vector<Atom>& atom);

  class InternalMotion {
    std::set<int> _group;   // moving group definition
    std::set<int> _axis;    // moving direction definition
    int _qmin_size;         // minimum quantum states number
    int _qmax_size;         // maximum quantum states number
    int _disc_size;         // discretization size

  protected:
    std::string last_key;

  public:
    InternalMotion (std::istream&) ;

    virtual std::vector<D3::Vector> normal_mode (const std::vector<Atom>&) const  =0;

    void set_axis (const std::vector<Atom>& atom, D3::Vector& normal, D3::Vector& ref) const
      ;

    static void adjust (const std::vector<Atom>&, std::vector<D3::Vector>&) ;

    int  quantum_size_min    () const { return _qmin_size; }
    int  quantum_size_max    () const { return _qmax_size; }
    int  discretization_size () const { return _disc_size;  }

    int maximum_atomic_index () const { return *_group.rbegin() > *_axis.rbegin() ?
	*_group.rbegin() : *_axis.rbegin(); }

  };

  class InternalRotation : public InternalMotion {
    int _symmetry;       // internal rotation symmetry
    int    _msize;      // generalized mass sampling size

  public:
    InternalRotation (std::istream&) ;

    std::vector<D3::Vector> normal_mode (const std::vector<Atom>& atom) const ;
    std::vector<Atom> rotate (const std::vector<Atom>& atom, double angle) const ;

    int           symmetry () const { return _symmetry; }
    int mass_sampling_size () const { return _msize;    }
  };

  class UmbrellaMode : public InternalMotion {

    // non-equidistant grid
    std::vector<double> _grid;
    double             _range;

  public:
    UmbrellaMode (std::istream&) ;

    std::vector<D3::Vector> normal_mode (const std::vector<Atom>& atom) const ;

    int    grid_size      () const { return _grid.size(); }
    double grid_point(int i) const { return _grid[i];     }
    double range          () const { return _range;       }
  };

  /********************************************************************************************
   ********************************* COUPLED INTERNAL ROTORS MODEL ****************************
   ********************************************************************************************/

  class MultiRotor: public Core {

    enum {CLASSICAL, QUANTUM};
    int               _method; // density/number of states calculation method

    std::vector<Atom>   _atom; // molecular geometry
    double              _mass; // molecular mass

    std::vector<InternalRotation> _internal_rotation;      // internal rotation description
    std::vector<UmbrellaMode>         _umbrella_mode;      // umbrell mode description

    double  _external_symmetry; // external rotation symmetry number

    // generalized mass & external rotation factor fourier expansion
    MultiIndex                           _mass_index; // mass sampling dimensions
    std::vector<Lapack::SymmetricMatrix> _mass_array; // inverted mass fourier expansion
    std::vector<double> _erf_four;  // external rotation factor [sqrt(I1*I2*I3)] fourier expansion

    // potential fourier expansion
    MultiIndex         _pot_index; // potential fourier expansion dimensions
    std::vector<double> _pot_four; // potential fourier expansion

    // vibrational frequencies fourier expansion
    int                                _vib_num; // number of vibational frequencies
    std::vector<std::vector<double> > _vib_four; // vibrational frequencies fourier expansion

    // properties on the angular grid
    MultiIndex                 _grid_index; // angular grid dimensions
    std::vector<double>          _pot_grid; // potential on the grid 
    std::vector<Lapack::Vector>  _vib_grid; // vibrational frequencies on the grid
    std::vector<Lapack::Vector> _freq_grid; // internal rotation frequencies on the grid
    std::vector<double>         _mass_grid; // square root of the mass determinant on the grid
    double                           _avol; // angular grid cell volume
    double                        _zpe_num; // classical number of states at zero point energy 

    // quantum energy levels
    std::vector<std::vector<double> > _energy_level; // quantum energy level
    std::vector<std::vector<double> >     _mean_erf; // quantum state averaged external rotation factor [sqrt(I1*I2*I3)]
    double                                  _ground; // ground level energy
    double                          _level_ener_max; // maximal quantum level energy


    // controls
    bool      _is_ext_rot;      // include external rotation

    // states number/density extrapolation 
    double      _expol_emin; // minimal interpolation energy
    double      _expol_nmin; // energy power at minimum
    double      _expol_amin; // power prefactor at minimum
    double      _expol_emax; // maximal interpolation energy
    double      _expol_nmax; // energy power at maximum
    double      _expol_amax; // power prefactor at maximum
    double      _expol_incr; // logorithmic increment
    Slatec::Spline   _expol;

  public:
    
    MultiRotor(std::istream&, int = DENSITY) ;
    ~MultiRotor();

    int     internal_size ()      const { return _internal_rotation.size() + _umbrellla_mode.size(); }
    int          symmetry (int i) const { return _symmetry[i]; }
    int external_symmetry ()      const { return _external_symmetry; }

    double potential (const std::vector<double>& angle, 
		      const std::vector<int>& der =std::vector<int>()) const ;
    Lapack::Vector      frequencies (const std::vector<double>& angle) const ;
    Lapack::SymmetricMatrix    mass (const std::vector<double>& angle) const ;
    Lapack::Vector        vibration (const std::vector<double>& angle) const ;
    double external_rotation_factor (const std::vector<double>& angle) const ;
 
    // statistical weights
    double   quantum_weight (double temperature) const;
    int          get_weight (double temperature, double& cw, double& pw) const;      // classical & path integral weights
    double classical_states (int mode, double energy)  const ; // absoulte energy
    double   quantum_states (int mode, double energy)  const ; // absolute energy
    double           states (int mode, double energy)  const ; // energy relative to the ground level

    // virtual functions
    double ground       () const;
    double states (double) const;
    double weight (double) const;
    double   mass       () const;
    const std::vector<Atom>& geometry () const;
  };

  /********************************************************************************************
   ************************************** WELL CLASS FAMILY ***********************************
   ********************************************************************************************/

  // potential energy well corresponding to a metastable species
  class Well {
  public:
    virtual ~Well ();

    // well bottom energy
    virtual double                                            depth ()                   const =0;
    // density of states as a function of energy
    virtual double                                    state_density (double energy)      const =0;
    // statistical weight relative to the well bottom
    virtual double                                           weight (double temperature) const =0;
  };

  /************************* RIGID ROTOR HARMONIC OSCILATOR MODEL ************************/

  class RRHO {
    SharedPointer<Tunnel>                 _tunnel; // tunneling   
    SharedPointer<Core>                     _core; // other degrees of freedom
    std::vector<SharedPointer<RotorBase> > _rotor; // hindered rotors
    std::vector<double>                _frequency; // real frequencies
    std::vector<int>                       _qfreq; // integer frequencies in quantum units 
    double                               _quantum; // frequency quantum    
    double                                _ground; // ground energy
    std::vector<double>                   _elevel; // electronic energy levels
    std::vector<int>                      _edegen; // electronic level degeneracies

    // internal variables and functions
    const   double    _eps;
    double           _emin;
    double           _emax;
    Slatec::Spline _states;

  public:
    RRHO (std::istream&, int) ;

    double ground       () const { return _ground; }
    double states (double) const;
    double weight (double) const; // weight relative to the bottom of the well
    double   mass       () const { return _core->mass(); }    
  };

  /************************* RIGID ROTOR HARMONIC OSCILATOR WELL MODEL ************************/
  
  class RRHO_Well : public Well, public RRHO {

  public:
    RRHO_Well (std::istream& from)   : RRHO(from, DENSITY) {}
    ~RRHO_Well ();

    double depth         ()       const;
    double state_density (double) const;
    double weight        (double) const; // weight relative to the bottom of the well
  };

  /********************* READ DENSITY OF STATES FROM THE FILE AND INTERPOLATE ****************/
  
  class ReadBase {    
    Array<double>   _ener; // relative energy on the grid
    Array<double> _states; // density/number of states on the grid

    Slatec::Spline _spline;
    double _ground;
    double _emin, _emax;
    double _nmin, _amin;
    double _nmax, _amax;

    const double _etol; // relative energy tolerance
    const double _dtol; // absolute DoS    tolerance
    

  public:
    ReadBase (std::istream&) ;
    ~ReadBase ();

    double ground       () const { return _ground; }
    double states (double) const;
    double weight (double) const;
  };
  
  class ReadWell : public ReadBase, public Well {
  public:
    ReadWell (std::istream& from)  : ReadBase(from) {}
    ~ReadWell ();

    double depth                    () const;
    double state_density (double ener) const;
    double weight (double temperature) const;
  };
  
  /************************************* UNION OF WELLS **************************************/

  class UnionWell : public Well {
    std::vector<SharedPointer<Well> > _well;
    double _depth;

    typedef std::vector<SharedPointer<Well> >::const_iterator _Cit;

  public:
    UnionWell  (std::istream&) ;
    ~UnionWell ();

    double depth         ()       const;
    double state_density (double) const;
    double weight        (double) const;
  };

  /********************************************************************************************
   ********************************** BARRIER CLASS FAMILY ************************************
   ********************************************************************************************/

  // potential energy barrier separating different species (wells)
  class Barrier {
  public:
    virtual ~Barrier ();

    virtual double height       ()              const =0;// barrier top energy
    virtual double state_number (double energy) const =0;// number of states as a function of energy
    virtual double weight       (double temper) const =0;// statistical weight ralative to the barrier top
  };

  /*********************** RIGID ROTOR HARMONIC OSCILATOR BARRIER MODEL **********************/

  class RRHO_Barrier : public Barrier, public RRHO {
  public:
    RRHO_Barrier (std::istream& from)  : RRHO(from, NUMBER) {}
    ~RRHO_Barrier ();

    double height       ()       const;
    double state_number (double) const;
    double weight       (double) const;
  };

  
  /********************* READ NUMBER OF STATES FROM THE FILE AND INTERPOLATE ****************/
  
  class ReadBarrier : public ReadBase, public Barrier {
  public:
    ReadBarrier (std::istream& from)  : ReadBase(from) {}
    ~ReadBarrier ();

    double height                   () const;
    double state_number  (double ener) const;
    double weight (double temperature) const;
  };
  
/*********************************** UNION OF BARRIERS **************************************/

  class UnionBarrier : public Barrier {
    std::vector<SharedPointer<Barrier> > _barrier;
    double _height;

    typedef std::vector<SharedPointer<Barrier> >::const_iterator _Cit;

  public:
    UnionBarrier  (std::istream&) ;
    ~UnionBarrier ();

    double height             () const;
    double state_number (double) const;
    double weight       (double) const;
  };

  /********************************************************************************************
   ******************************** FRAGMENT CLASS FAMILY **********************************
   ********************************************************************************************/

  class Fragment {
  public:
    virtual ~Fragment ();

    virtual double ground       () const =0;
    virtual double weight (double) const =0;
    virtual double   mass       () const =0;
  };

  /********************************************************************************************
   *********************************** ATOMIC FRAGMENT CLASS **********************************
   ********************************************************************************************/

  class AtomicFragment : public Fragment {
    double                                  _mass;
    double                                _ground;
    std::vector<double>                   _elevel; // electronic energy levels
    std::vector<int>                      _edegen; // electronic level degeneracies

  public:
    AtomicFragment(std::istream& from) ;
    ~AtomicFragment ();

    double ground       () const;
    double weight (double) const;
    double   mass       () const;
  };

  /********************************************************************************************
   *********************************** RRHO FRAGMENT CLASS ************************************
   ********************************************************************************************/

  class RRHO_Fragment : public Fragment, public RRHO {
  public:
    RRHO_Fragment(std::istream& from)  : RRHO(from, NONE) {}
    ~RRHO_Fragment ();

    double ground       () const;
    double weight (double) const;
    double   mass       () const;
  };

  /********************************************************************************************
   ************************************* BIMOLECULAR CLASS ************************************
   ********************************************************************************************/

  // bimolecular products
  class Bimolecular {
    bool _dummy;
    std::vector<SharedPointer<Fragment> > _fragment;
    double _weight_fac;
    double _ground;

  public:
    Bimolecular (std::istream&) ;
    ~Bimolecular ();

    // ground energy
    bool     dummy () const { return _dummy; }
    double  ground () const;
    double  weight (double) const;
  };

}// namespace Model

#endif
